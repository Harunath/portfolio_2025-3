import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Providers from "./providers";

const geistSans = Geist({
	variable: "--font-geist-sans",
	subsets: ["latin"],
});

const geistMono = Geist_Mono({
	variable: "--font-geist-mono",
	subsets: ["latin"],
});

// export const metadata: Metadata = {
// 	title: "Create Next App",
// 	description: "Generated by create next app",
// };

export const metadata: Metadata = {
	title: "Harunath Eskuri | Full-Stack Developer",
	description:
		"Portfolio of Harunath Eskuri, a full-stack developer specializing in Next.js, TypeScript, Prisma, and Tailwind CSS. Explore projects, skills, and contact information.",
	keywords: [
		"Full-Stack Developer",
		"Next.js",
		"React",
		"Prisma",
		"Tailwind CSS",
		"JavaScript",
		"TypeScript",
		"Freelance Developer",
		"Portfolio",
	],
	authors: [{ name: "Harunath Eskuri", url: "https://harunath.vercel.app" }],
	creator: "Harunath Eskuri",
	metadataBase: new URL("https://harunath.vercel.app"),
	openGraph: {
		title: "Harunath Eskuri | Full-Stack Developer",
		description:
			"Explore the portfolio of Harunath Eskuri, a skilled full-stack developer specializing in Next.js, Prisma, and Tailwind CSS.",
		url: "https://harunath.vercel.app",
		siteName: "Harunath Eskuri Portfolio",
		images: [
			{
				url: "/logo.png", // Add your Open Graph image
				width: 1200,
				height: 630,
				alt: "Harunath Eskuri Portfolio",
			},
		],
		locale: "en_US",
		type: "website",
	},
	twitter: {
		card: "summary_large_image",
		site: "@yourtwitterhandle",
		creator: "@yourtwitterhandle",
		title: "Harunath Eskuri | Full-Stack Developer",
		description:
			"Explore the portfolio of Harunath Eskuri, a skilled full-stack developer specializing in Next.js, Prisma, and Tailwind CSS.",
		images: ["/logo.png"], // Same as Open Graph image
	},
	icons: {
		icon: "/favicon.png",
		apple: "/apple-touch-icon.png",
	},
};

export default function RootLayout({
	children,
}: Readonly<{
	children: React.ReactNode;
}>) {
	return (
		<html lang="en">
			<body
				className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
				<Providers>{children}</Providers>
			</body>
		</html>
	);
}
